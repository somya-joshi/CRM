{"ast":null,"code":"var _jsxFileName = \"E:\\\\oms_reactJs\\\\oms\\\\src\\\\omsOrderComponent\\\\GridExample.jsx\",\n  _s = $RefreshSig$();\nimport 'ag-grid-community/styles/ag-grid.css';\nimport 'ag-grid-community/styles/ag-theme-quartz.css';\nimport { AgGridReact } from 'ag-grid-react';\nimport React, { useEffect, useMemo, useState } from 'react';\n//import { createRoot } from 'react-dom/client';\nimport Button from 'react-bootstrap/Button';\n\n// Create new GridExample component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GridExample = () => {\n  _s();\n  const [rowData, setRowData] = useState([]);\n\n  // Column Definitions: Defines & controls grid columns.\n  const [colDefs] = useState([{\n    field: 'displayOrderId'\n  }, {\n    field: 'customerName'\n  }, {\n    field: 'productName'\n  }, {\n    field: 'mobileNo'\n  }, {\n    field: 'modelNo'\n  }, {\n    field: 'brandName'\n  }, {\n    field: 'ProductColor'\n  }, {\n    field: 'category'\n  }, {\n    field: 'subCategory'\n  }, {\n    field: 'discription'\n  }, {\n    field: 'orderDate'\n  }, {\n    field: 'expectedDeliveryDate'\n  }, {\n    field: 'logisticName'\n  }, {\n    field: 'awbNo'\n  }, {\n    field: 'couponCode'\n  }]);\n\n  // Fetch data & update rowData state\n  useEffect(() => {\n    fetch('http://localhost:8080/getcustomerorders').then(result => result.json()).then(rowData => setRowData(rowData));\n  }, []);\n\n  // Apply settings across all columns\n  const defaultColDef = useMemo(() => ({\n    filter: true,\n    editable: true\n  }), []);\n\n  // Container: Defines the grid's theme & dimensions.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ag-theme-quartz\",\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(AgGridReact, {\n      rowData: rowData,\n      columnDefs: colDefs,\n      defaultColDef: defaultColDef,\n      pagination: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(GridExample, \"C6KK0oKUtGywJUcscQUSVSr4sNk=\");\n_c = GridExample;\nexport default GridExample;\nvar _c;\n$RefreshReg$(_c, \"GridExample\");","map":{"version":3,"names":["AgGridReact","React","useEffect","useMemo","useState","Button","jsxDEV","_jsxDEV","GridExample","_s","rowData","setRowData","colDefs","field","fetch","then","result","json","defaultColDef","filter","editable","className","style","width","height","children","columnDefs","pagination","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/oms_reactJs/oms/src/omsOrderComponent/GridExample.jsx"],"sourcesContent":["import 'ag-grid-community/styles/ag-grid.css';\r\nimport 'ag-grid-community/styles/ag-theme-quartz.css';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport React, { useEffect, useMemo, useState } from 'react';\r\n//import { createRoot } from 'react-dom/client';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\n// Create new GridExample component\r\nconst GridExample = () => {\r\n\r\n  const [rowData, setRowData] = useState([]);\r\n\r\n  // Column Definitions: Defines & controls grid columns.\r\n  const [colDefs] = useState([\r\n    { field: 'displayOrderId'},\r\n    {field: 'customerName'},\r\n    {field: 'productName'},\r\n    {field: 'mobileNo'},\r\n    {field: 'modelNo'},\r\n    {field: 'brandName'},\r\n    { field: 'ProductColor' },\r\n    { field:'category'},\r\n    { field:'subCategory'},\r\n    { field:'discription'},\r\n    { field:'orderDate'},\r\n    { field:'expectedDeliveryDate'},\r\n    { field:'logisticName'},\r\n    { field:'awbNo'},\r\n    { field:'couponCode'},\r\n  ]);\r\n\r\n  // Fetch data & update rowData state\r\n  useEffect(() => {\r\n    fetch('http://localhost:8080/getcustomerorders')\r\n      .then((result) => result.json())\r\n      .then((rowData) => setRowData(rowData));\r\n  }, []);\r\n\r\n  // Apply settings across all columns\r\n  const defaultColDef = useMemo(() => ({\r\n    filter: true,\r\n    editable: true,\r\n  }),[]);\r\n\r\n  // Container: Defines the grid's theme & dimensions.\r\n  return (\r\n    <div className={ \"ag-theme-quartz\"} style={{ width: '100%', height: '100%' }}>\r\n      <AgGridReact\r\n        rowData={rowData}\r\n        columnDefs={colDefs}\r\n        defaultColDef={defaultColDef}\r\n        pagination={true}\r\n \r\n      />\r\n    </div>\r\n  );\r\n};\r\n export default GridExample;\r\n"],"mappings":";;AAAA,OAAO,sCAAsC;AAC7C,OAAO,8CAA8C;AACrD,SAASA,WAAW,QAAQ,eAAe;AAC3C,OAAOC,KAAK,IAAIC,SAAS,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AAC3D;AACA,OAAOC,MAAM,MAAM,wBAAwB;;AAG3C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAExB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACA,MAAM,CAACQ,OAAO,CAAC,GAAGR,QAAQ,CAAC,CACzB;IAAES,KAAK,EAAE;EAAgB,CAAC,EAC1B;IAACA,KAAK,EAAE;EAAc,CAAC,EACvB;IAACA,KAAK,EAAE;EAAa,CAAC,EACtB;IAACA,KAAK,EAAE;EAAU,CAAC,EACnB;IAACA,KAAK,EAAE;EAAS,CAAC,EAClB;IAACA,KAAK,EAAE;EAAW,CAAC,EACpB;IAAEA,KAAK,EAAE;EAAe,CAAC,EACzB;IAAEA,KAAK,EAAC;EAAU,CAAC,EACnB;IAAEA,KAAK,EAAC;EAAa,CAAC,EACtB;IAAEA,KAAK,EAAC;EAAa,CAAC,EACtB;IAAEA,KAAK,EAAC;EAAW,CAAC,EACpB;IAAEA,KAAK,EAAC;EAAsB,CAAC,EAC/B;IAAEA,KAAK,EAAC;EAAc,CAAC,EACvB;IAAEA,KAAK,EAAC;EAAO,CAAC,EAChB;IAAEA,KAAK,EAAC;EAAY,CAAC,CACtB,CAAC;;EAEF;EACAX,SAAS,CAAC,MAAM;IACdY,KAAK,CAAC,yCAAyC,CAAC,CAC7CC,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC,CAC/BF,IAAI,CAAEL,OAAO,IAAKC,UAAU,CAACD,OAAO,CAAC,CAAC;EAC3C,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMQ,aAAa,GAAGf,OAAO,CAAC,OAAO;IACnCgB,MAAM,EAAE,IAAI;IACZC,QAAQ,EAAE;EACZ,CAAC,CAAC,EAAC,EAAE,CAAC;;EAEN;EACA,oBACEb,OAAA;IAAKc,SAAS,EAAG,iBAAkB;IAACC,KAAK,EAAE;MAAEC,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAO,CAAE;IAAAC,QAAA,eAC3ElB,OAAA,CAACP,WAAW;MACVU,OAAO,EAAEA,OAAQ;MACjBgB,UAAU,EAAEd,OAAQ;MACpBM,aAAa,EAAEA,aAAc;MAC7BS,UAAU,EAAE;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAElB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACtB,EAAA,CAhDID,WAAW;AAAAwB,EAAA,GAAXxB,WAAW;AAiDhB,eAAeA,WAAW;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}